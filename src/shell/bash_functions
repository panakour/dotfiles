#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Clone a repository and install its dependencies.

clone() {

    git clone "$1" \
        || return

    cd "$(basename "${1%.*}")" \
        || return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if there are dependencies to be installed.

    if [ ! -f "package.json" ]; then
        return
    fi

    # Check if the project uses Yarn.

    if [ -f "yarn.lock" ] && command -v "yarn" $> /dev/null; then
        printf "\n"
        yarn install
        return
    fi

    # If not, assume it uses npm.

    if command -v "npm" $> /dev/null; then
        printf "\n"
        npm install
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file.

datauri() {

    local mimeType=""

    if [ ! -f "$1" ]; then
        printf "%s is not a file.\n" "$1"
        return
    fi

    mimeType=$(file --brief --mime-type "$1")
    #               └─ do not prepend the filename to the output

    if [[ $mimeType == text/* ]]; then
        mimeType="$mimeType;charset=utf-8"
    fi

    printf "data:%s;base64,%s" \
        "$mimeType" \
        "$(openssl base64 -in "$1" | tr -d "\n")"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.

delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Execute Vim macro

evm() {

    local numberOfTimes="${*: -1}"
    local files

    if [[ "$numberOfTimes" =~ ^[0-9]+$ ]]; then
        files=("${@:1:$#-1}")
    else
        numberOfTimes="1"
        files=("$@")
    fi

    for file in "${files[@]}"; do
        printf "* %s\n" "$file"
        vim \
            -c "norm! $numberOfTimes@q" \
            -c "wq" \
            "$file"
    done

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Resize image.
#
# Create a new image based on the specified image resized by the
# specified amount.
#
# $1: Path to the original image.
# $2: Resize value (default is 50%).
#     See also: https://imagemagick.org/script/command-line-processing.php#geometry
#
# Usage examples:
#
#   * resize-image ./path/to/image.jpg 30%
#   * resize-image ./path/to/image.jpg 1000x1000!

resize-image() {

    # Check if ImageMagick's convert command-line tool is installed.

    if ! command -v "convert" $> /dev/null; then
        printf "ImageMagick's 'convert' command-line tool is not installed!"
        exit
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    declare path="$(dirname "$1")"
    declare fileName="$(basename "$1")"
    declare geometry="${2:-50%}"

    convert \
        "$1" \
        -colorspace RGB \
        +sigmoidal-contrast 11.6933 \
        -define filter:filter=Sinc \
        -define filter:window=Jinc \
        -define filter:lobes=3 \
        -sigmoidal-contrast 11.6933 \
        -colorspace sRGB \
        -background transparent \
        -gravity center \
        -resize "$geometry" \
        +append \
        "$path/_$fileName" \
    && printf "* %s (%s)\n" \
            "$path/_$fileName" \
            "$geometry"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

h() {
    #           ┌─ Enable colors for pipe.
    #           │  ("--color=auto" enables colors only
    #           │   if the output is in the terminal.)
    grep --color=always "$*" "$HISTFILE" \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory.

s() {
    grep --color=always "$*" \
         --exclude-dir=".git" \
         --exclude-dir="node_modules" \
         --ignore-case \
         --recursive \
         . \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.
}

nginx-container-id() {
    cat <<< "$(docker ps -q --filter status=running --filter name=nginx -n 1)"
}

php-container-id() {
    containerName="${1}"

    if [[ -z "$1" ]]; then
        containerName=php-fpm
    fi

    cat <<< "$(docker ps -q --filter status=running --filter name=${containerName} -n 1)"
}

mysql-container-id() {
    cat <<< "$(docker ps -q --filter status=running --filter name=mysql --filter name=mariadb -n 1)"
}

function dockerstopall() {
    docker stop "$(docker ps -qa)"
}

function phpup() {
    execute "cd ~/Code/phpdock/ && make uplocal" \
        "START PHPDOCK"
}

function phpbash() {
    docker exec --user=www-data -it "$(php-container-id "$@")" sh
}

function nginxrestart() {
    docker restart "$(nginx-container-id)"
}

function art(){
   dir="$1";
   shift;
   args="$*";
   docker exec --user=www-data "$(php-container-id "$@")" php "${dir}"/artisan "${args}"
}

mysql-create-db() {

    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysql -uroot -proot -e 'CREATE SCHEMA IF NOT EXISTS $1 DEFAULT CHARACTER SET utf8mb4 COLLATE = utf8mb4_unicode_ci'" \
            "create db"
}

mysql-drop-db() {

    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysql -uroot -proot -e 'DROP DATABASE $1'" \
      "drop db"
}

mysql-import-db() {

    file="${1}"
    dbName="${2}"

    if [[ -z "$file" ]]; then
        printf "give a file.\n"
        return 1
    fi

    if [[ ! -f "$file" ]]; then
        printf "file: %s not found.\n" "$file"
        return 1
    fi

    if [[ -z "$dbName" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    mysql-create-db "${dbName}"

    execute "docker exec -i $(mysql-container-id) mysql -uroot -proot -f ${dbName} < ${file}" \
        "import db"
}

mysql-export-db() {
    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysqldump -uroot -proot $1 > $1.sql" \
         "export db"
}

psql-container-id() {
    cat <<< "$(docker ps -q --filter status=running --filter name=postgres --filter name=postgres -n 1)"
}

psql-create-db() {

    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec -it $(psql-container-id) psql -U root -c 'CREATE DATABASE $1;'"
}
