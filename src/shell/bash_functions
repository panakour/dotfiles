#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file.

datauri() {

    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")"
    else
        printf "%s is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.

delete-files() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get gzip information (gzipped file size + reduction size).

gz() {

    declare -i gzippedSize=0
    declare -i originalSize=0

    if [ -f "$1" ]; then
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $((originalSize - gzippedSize)) )" \
                        "$( printf "%s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e "s/0*$//;s/\.$//" )"
                            #              └─ remove tailing zeros

        else
            printf "\"%s\" is empty.\n" "$1"
        fi
    else
        printf "\"%s\" is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Human readable file size
# (because `du -h` doesn't cut it for me).

hrfs() {

    printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;

            # confirm that the input is a number
            if ( value + .0 == value ) {

                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }

                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }

            }
        }' |
    sed -e ":l" \
        -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
    #    └─ add thousands separator
    #       (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create new directories and enter the first one.

mkd() {
    if [ -n "$*" ]; then

        mkdir -p "$@"
        #      └─ make parent directories if needed

        cd "$@" \
            || exit 1

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Process phone images.

ppi() {
    command -v "convert" &> /dev/null \
        || exit 0;

    declare query="${1:-*.jpg}"
    declare geometry="${2:-50%}"

    for i in $query; do

        if [[ "$(echo "${i##*.}" | tr '[:upper:]' '[:lower:]')" != "png" ]]; then
            imgName="${i%.*}.png"
        else
            imgName="_${i%.*}.png"
        fi

        convert "$i" \
            -colorspace RGB \
            +sigmoidal-contrast 11.6933 \
            -define filter:filter=Sinc \
            -define filter:window=Jinc \
            -define filter:lobes=3 \
            -sigmoidal-contrast 11.6933 \
            -colorspace sRGB \
            -background transparent \
            -gravity center \
            -resize "$geometry" \
            +append \
            "$imgName" \
        && printf "* %s (%s)\n" \
            "$imgName" \
            "$geometry"

    done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text within the current directory.

qt() {
    grep -ir --color=always "$*" --exclude-dir=".git" --exclude-dir="node_modules" --exclude-dir="vendor" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

nginx-container-id() {
    cat <<< "$(docker ps -q --filter name=nginx)"
}

php-container-id() {
    cat <<< "$(docker ps -q --filter name=php-fpm)"
}

mysql-container-id() {
    cat <<< "$(docker ps -q --filter name=mysql -n 1)"
}

function dockerstopall() {
    docker stop "$(docker ps -qa)"
}

function phpup() {
    execute "cd ~/Code/phpdock/ && make uplocal" \
        "START PHPDOCK"
}

function phpbash() {
    docker exec --user=www-data -it "$(php-container-id)" sh
}

function nginxrestart() {
    docker restart "$(nginx-container-id)"
}

function art(){
   dir="$1";
   shift;
   args="$*";
   docker exec --user=www-data "$(php-container-id)" php "${dir}"/artisan "${args}"
}

mysql-create-db() {

    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysql -uroot -proot -e 'CREATE SCHEMA IF NOT EXISTS $1 DEFAULT CHARACTER SET utf8mb4 COLLATE = utf8mb4_unicode_ci'" \
            "create db"
}

mysql-drop-db() {

    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysql -uroot -proot -e 'DROP DATABASE $1'" \
      "drop db"
}

mysql-import-db() {

    file="${1}"
    dbName="${2}"

    if [[ -z "$file" ]]; then
        printf "give a file.\n"
        return 1
    fi

    if [[ ! -f "$file" ]]; then
        printf "file: %s not found.\n" "$file"
        return 1
    fi

    if [[ -z "$dbName" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    mysql-create-db "${dbName}"

    execute "docker exec -i $(mysql-container-id) mysql -uroot -proot ${dbName} < ${file}" \
        "import db"
}

mysql-export-db() {
    if [[ -z "$1" ]]; then
        printf "give a name for the db.\n"
        return 1
    fi

    execute "docker exec $(mysql-container-id) mysqldump -uroot -proot $1 > $1.sql" \
         "export db"
}
